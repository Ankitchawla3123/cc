1. Family Tree

code: 
parent(john, mary).
parent(john, tom).
parent(mary, ann).
parent(tom, bob).

male(john).
male(tom).
male(bob).
female(mary).
female(ann).

father(X, Y) :- parent(X, Y), male(X).
mother(X, Y) :- parent(X, Y), female(X).
grandparent(X, Y) :- parent(X, Z), parent(Z, Y).
sibling(X, Y) :- parent(Z, X), parent(Z, Y), X \= Y.

excute: 
?- parent(john, mary).      
?- grandparent(X, mary).

2. Concatenation of Lists

code: 
conc([], L, L).
conc([H|T], L2, [H|L3]) :- conc(T, L2, L3).


excute: 
?- conc([1,2], [3,4], L).     % L = [1,2,3,4]



3. Reverse a List

code: 
reverse_list([], []).
reverse_list([H|T], R) :-
    reverse_list(T, RevT),
    append(RevT, [H], R).

excute: 
?- reverse_list([1,2,3], R).  % R = [3,2,1]



4. Sum of Two Numbers

code: 
sum(X, Y, S) :- S is X + Y.


excute: 
?- sum(5, 7, S).              % S = 12



5. Maximum of Two Numbers

code: 
max(X, Y, X) :- X >= Y.
max(X, Y, Y) :- Y > X.


excute: 
?- max(4, 8, M).              % M = 8



6. Factorial

code: 
factorial(0, 1).
factorial(N, F) :-
    N > 0,
    N1 is N - 1,
    factorial(N1, F1),
    F is N * F1.


excute: 
?- factorial(5, F).           % F = 120



7. Fibonacci Number Generation

code: 
generate_fib(0, 0).
generate_fib(1, 1).
generate_fib(N, T) :-
    N > 1,
    N1 is N - 1,
    N2 is N - 2,
    generate_fib(N1, T1),
    generate_fib(N2, T2),
    T is T1 + T2.


excute: 
?- generate_fib(7, T).        % T = 13



8. Power Function

code: 
power(_, 0, 1).
power(Num, Pow, Ans) :-
    Pow > 0,
    Pow1 is Pow - 1,
    power(Num, Pow1, Ans1),
    Ans is Num * Ans1.


excute: 
?- power(2, 3, Ans).          % Ans = 8



9. Multiplication of Two Numbers

code: 
multi(0, _, 0).
multi(N1, N2, R) :-
    N1 > 0,
    N3 is N1 - 1,
    multi(N3, N2, R1),
    R is R1 + N2.


excute: 
?- multi(4, 5, R).            % R = 20



10. Membership in a List

code: 
memb(X, [X|_]).
memb(X, [_|T]) :- memb(X, T).


excute: 
?- memb(3, [1,2,3,4]).        % true
?- memb(9, [1,2,3]).          % false



11. Sum of List Elements

code: 
sumlist([], 0).
sumlist([H|T], S) :-
    sumlist(T, S1),
    S is H + S1.


excute: 
?- sumlist([1,2,3,4], S).     % S = 10



12. Even/Odd Length of List

code: 
evenlength([]).
evenlength([_,_|T]) :- evenlength(T).

oddlength([_]).
oddlength([_,_|T]) :- oddlength(T).


excute: 
?- evenlength([1,2,3,4]).     % true
?- oddlength([1,2,3]).        % true



13. Maximum Element in List

code: 
maxlist([X], X).
maxlist([H|T], M) :-
    maxlist(T, M1),
    (H > M1 -> M = H ; M = M1).


excute: 
?- maxlist([4,8,1,7], M).     % M = 8



14. Insert Element at Nth Position

code: 
insert(0, X, L, [X|L]).
insert(N, X, [H|T], [H|R]) :-
    N > 0,
    N1 is N - 1,
    insert(N1, X, T, R).


excute: 
?- insert(3, 99, [1,2,4,5], R).    %R = [1, 2, 99, 4, 5].



15. Delete Element at Nth Position

code: 
delete(0, [_|T], T).
delete(N, [H|T], [H|R]) :-
    N > 0,
    N1 is N - 1,
    delete(N1, T, R).


excute: 
?- delete(2, [1,2,3,4], R).   % R = [1,3,4]


